gulp是基于node环境中流的概念开发出来的自动化构建工具
使用gulp时只要指定一个路径，然后通过管道方式使用插件，最后生成文件
管道方式的运用省去了中间生成多个临时文件的步骤，提高构建效率


gulp.src(globs[, options])
globs 
类型： String 或 Array 
所要读取的 glob 或者包含 globs 的数组。
options
类型： Object
options.buffer
类型： Boolean 默认值： true
如果该项被设置为 false，那么将会以 stream 方式返回 file.contents 而不是文件 buffer 的形式。
注意：插件可能并不会实现对 stream 的支持。
options.read
类型： Boolean 默认值： true
如果该项被设置为 false， 那么 file.contents 会返回空值（null），也就是并不会去读取文件。
options.base
类型： String
参数会加在glob之前，执行时会去按拼接后的新路径查找，所匹配的路径从base值之后开始计算。
asset/js/**/*,{base:asset}，匹配的路径是js/**/*，去掉base，匹配路径是**/*。

gulp.dest(path[, options])
能将pipe中的数据生成文件，如果某文件夹不存在，将会自动创建它。
文件成的路径是path参数所指的路径，如果在gulp.src中设置了base，也会影响文件路径。
path
类型： String 或 Function
文件将被写入的路径（输出目录）。也可以传入一个函数，在函数中返回相应路径。
options
类型： Object
options.cwd
类型： String 默认值： process.cwd()
process cwd() 方法返回 Node.js 进程当前工作的目录。
只在所给的输出目录是相对路径时候有效。
options.mode
类型： String 默认值： 0777
八进制权限字符，用与定义所有在输出目录中所创建的目录的权限。

gulp.task(name[, deps], fn)
定义一个gulp任务。
默认的，task 将以最大的并发数执行，也就是说，gulp 会一次性运行所有的 task 并且不做任何等待。
使用gulp-sequence插件来定义执行顺序会方便很多。
name
任务的名字，如果需要在命令行中运行某些任务，那么，不要在名字中使用空格。
deps
类型： Array
一个包含任务列表的数组，这些任务会在你当前任务运行之前完成。
当前执行的任务可能依赖deps任务列表中的任务完成后才能执行。
需要确保任务列表中的任务都执行完成。
fn
定义任务所要执行的一些操作。

gulp.watch(glob [, opts], tasks) 或 gulp.watch(glob[, opts, cb])
监视文件，并且可以在文件发生改动时候做一些事情。
glob
类型： String 或 Array
一个 glob 字符串，或者一个包含多个 glob 字符串的数组，用来指定具体监控哪些文件的变动。
tasks
类型： Array
需要在文件变动后执行的一个或者多个通过 gulp.task() 创建的 task 的名字。
opts
类型： Object
传给 gaze 的参数。详见https://github.com/shama/gaze
cb(event)
类型： Function
每次变动需要执行的 callback。
callback 会被传入一个名为 event 的对象。这个对象描述了所监控到的变动：
event.type
类型： String
发生的变动的类型：added, changed 或者 deleted。
event.path
类型： String
触发了该事件的文件的路径。